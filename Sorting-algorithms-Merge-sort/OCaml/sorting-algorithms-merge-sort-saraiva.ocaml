let list =  [1;2;9;4;6]

let print_list f lst =
  let rec print_elements = function
    | [] -> ()
    | h::[] -> f h
    | h::t -> f h; print_string ","; print_elements t
  in
  print_string "[";
  print_elements lst;
  print_string "]\n";;


let rec split_at n xs =
  match n, xs with
      0, xs ->
        [], xs
    | _, [] ->
        failwith "index too large"
    | n, x::xs when n > 0 ->
        let xs', xs'' = split_at (pred n) xs in
          x::xs', xs''
    | _, _ ->
        invalid_arg "negative argument"

let rec merge_sort cmp = function
    [] -> []
  | [x] -> [x]
  | xs ->
      let xs, ys = split_at (List.length xs / 2) xs in
        List.merge cmp (merge_sort cmp xs) (merge_sort cmp ys)

let _ =  print_list print_int (merge_sort compare list)


